input {
  beats {
    port => 5044
  }
}

filter {

  # MATCH FILE/IMAGE HASHES (MD5 and SHA256)
  if ( [event_id] == 1 or [event_id] == 6 or [event_id] == 7 ) {
    grok {
      match => [ "[event_data][Hashes]", "MD5=(?<MD5>[0-9A-F]{32}),SHA256=(?<SHA256>[0-9A-F]{64})" ]
    }
  }

  # MATCH SYSMON CONFIG FILE HASH (SHA1 ONLY)
  if ( [event_id] == 16 ) {
    grok {
      match => [ "[event_data][ConfigurationFileHash]", "SHA1=(?<sysmon_config_SHA1>[0-9A-F]{40})" ]
    }
  }

  # GEOIP ON DESTINATION IP
  if ("" in [event_data][DestinationIp]) {
    if ( [event_data][DestinationIp] != "127.0.0.1" ) {
      geoip { 
        source => "[event_data][DestinationIp]" 
      }
    }
  }

  # EXTRACT EXTENSION FROM TARGET FILENAME
  if ( [event_id] == 2 or [event_id] == 11 or [event_id] == 15 ) {
    grok {
      #match => [ "[event_data][TargetFilename]", "(\.(?<file_extension>[.]*[0-9A-Za-z]*)$)" ]
      match => [ "[event_data][TargetFilename]", "((?<file_extension>[.]+[0-9A-Za-z]*)$)" ]
    }
    translate {
        field => "file_extension"
        destination => "file_extension_ransomware"
        fallback => "false"
        dictionary_path => '/etc/logstash/conf.d/dict/ransomware-extensions.yaml'
      }
  }

  # FIND MATCHING START DATA
  if ( [event_id] == 5 ) {
    elasticsearch {
      id => "process_duration"
      hosts => ["localhost:9200"]
      query => 'event_id:1 AND event_data.ProcessGuid:"%{[event_data][ProcessGuid]}"'
      fields => { "@timestamp" => "started" }
    }
    date {
      match => ["started", "ISO8601"]
      target => "[started]"
    }
    ruby {
      code => "event.set('duration_seconds', event.get('@timestamp') - event.get('started') ) "
    }
  }

  # TRANSLATE SYSMON EVENT ID INTO EVENT NAME
  translate {
    field => "event_id"
    destination => "event_id_text"
    dictionary_path => '/etc/logstash/conf.d/dict/sysmon_event_ids.yaml'
  }

  # IF WE WANT TO QUERY VT
  if ("" in [SHA256]) {
#  if ([SHA256] == "asdf") {

    # ONLY QUERY VT ON PROCESS CREATION EVENTS THAT AREN'T WHITELISTED
    if ( [event_id] == 1 or [event_id] == 6 or [event_id] == 7 ) {
      translate {
        field => "SHA256"
        destination => "whitelisted"
        fallback => "false"
        dictionary_path => '/etc/logstash/conf.d/dict/whitelist.yaml'
      }

      if ([whitelisted] == "false")
      {
        rest {
          request => {
            url => "http://www.virustotal.com/vtapi/v2/file/report"
            method => "GET"
            headers => {
              "Accept-Encoding" => "gzip, deflate"
              "User-Agent" => "gzip"
            }
            params => {
              "apikey" => "INSERT_YOUR_OWN"
              "resource" => "%{SHA256}"
            }
          }
          json => true
          target => "virustotal"
          fallback => {                        # hash describing a default in case of error
            "virustotal_error" => "true"
          }
        }
      }  
    }
  }
}

output {
  elasticsearch {
    hosts => localhost
    manage_template => false
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
}
